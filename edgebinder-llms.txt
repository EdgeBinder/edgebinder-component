# EdgeBinder Project - LLM Context

## Project Overview

EdgeBinder is a lightweight, storage-agnostic relationship management library for PHP 8.3+ that follows Domain-Driven Design principles. It provides a clean abstraction layer for managing entity relationships with rich metadata support across various storage backends through pluggable adapters.

### Core Value Proposition
"Bind entities with rich, metadata-driven relationships using storage-agnostic flexibility"

### Key Features
- **Storage Agnostic**: Use any storage backend through pluggable adapters
- **Rich Metadata**: Store complex relationship data with full metadata support
- **Type Safe**: Full PHP 8.3+ type safety with comprehensive PHPStan level 8 analysis
- **Domain-Driven Design**: Clean abstraction that doesn't pollute domain entities
- **Framework Agnostic**: Works with Laminas, Symfony, Laravel, Slim, and any PSR-11 framework
- **Extensible**: Plugin architecture for third-party adapters

## Repository Structure

### Core Repository (edgebinder/edgebinder)
- **Main EdgeBinder class**: `src/EdgeBinder.php` - Primary API for relationship management
- **Contracts**: `src/Contracts/` - Core interfaces (EdgeBinderInterface, PersistenceAdapterInterface, etc.)
- **Binding Entity**: `src/Binding.php` - Immutable binding representation
- **Query Builder**: `src/Query/BindingQueryBuilder.php` - Fluent query interface
- **Registry System**: `src/Registry/` - Framework-agnostic adapter extensibility
- **Exceptions**: `src/Exception/` - Comprehensive error handling

### Adapter Repositories
- **edgebinder/weaviate-adapter**: Vector database adapter for Weaviate
- **Future adapters**: Neo4j, Redis, MongoDB, JanusGraph, etc.

### Framework Components
- **edgebinder/laminas-component**: Laminas/Mezzio integration component
- **Future components**: Symfony bundle, Laravel package, etc.

## Core Architecture

### Main Classes and Interfaces

#### EdgeBinder (src/EdgeBinder.php)
Main service class implementing EdgeBinderInterface. Provides:
- `bind(object $from, object $to, string $type, array $metadata = []): BindingInterface`
- `unbind(string $bindingId): void`
- `query(): QueryBuilderInterface`
- `findBinding(string $bindingId): ?BindingInterface`

#### PersistenceAdapterInterface (src/Contracts/PersistenceAdapterInterface.php)
Core interface that all adapters must implement:
- `store(BindingInterface $binding): void`
- `find(string $bindingId): ?BindingInterface`
- `delete(string $bindingId): void`
- `executeQuery(QueryBuilderInterface $query): array`
- `extractEntityId(object $entity): string`
- `extractEntityType(object $entity): string`
- `validateAndNormalizeMetadata(array $metadata): array`

#### Binding (src/Binding.php)
Immutable value object representing a relationship:
- Contains: id, fromType, fromId, toType, toId, type, metadata, timestamps
- Factory method: `Binding::create()` for new instances
- Serialization: `toArray()` and `fromArray()` methods

### Framework-Agnostic Extensible Adapter System

#### AdapterFactoryInterface (src/Registry/AdapterFactoryInterface.php)
Interface for third-party adapter factories:
```php
interface AdapterFactoryInterface
{
    public function createAdapter(array $config): PersistenceAdapterInterface;
    public function getAdapterType(): string;
}
```

**Implementation Status**: ✅ COMPLETED
- Full interface with comprehensive PHPDoc
- Detailed configuration examples in docblocks
- Framework integration examples included
- Configuration structure clearly documented

#### AdapterRegistry (src/Registry/AdapterRegistry.php)
Static registry for managing adapter factories:
```php
class AdapterRegistry
{
    public static function register(AdapterFactoryInterface $factory): void;
    public static function create(string $type, array $config): PersistenceAdapterInterface;
    public static function hasAdapter(string $type): bool;
    public static function getRegisteredTypes(): array;
    public static function unregister(string $type): bool; // For testing
    public static function clear(): void; // For testing
    public static function getFactory(string $type): ?AdapterFactoryInterface; // For debugging
}
```

**Implementation Status**: ✅ COMPLETED
- All static methods implemented with proper error handling
- Duplicate registration prevention with AdapterException
- Helpful error messages with available adapter types
- Testing methods for clean test isolation
- Exception wrapping for consistent error handling

#### AdapterException (src/Exception/AdapterException.php)
Exception class for adapter-related errors:
```php
class AdapterException extends EdgeBinderException
{
    public static function factoryNotFound(string $adapterType, array $availableTypes = []): self;
    public static function creationFailed(string $adapterType, string $reason, ?\Throwable $previous = null): self;
    public static function alreadyRegistered(string $adapterType): self;
    public static function invalidConfiguration(string $adapterType, string $reason): self;
    public static function missingConfiguration(string $adapterType, array $missingKeys): self;
}
```

**Implementation Status**: ✅ COMPLETED
- Extends EdgeBinderException following existing patterns
- Factory methods for all common error scenarios
- Helpful error messages with context information
- Proper exception chaining support

### Phase 1 Implementation Status: ✅ COMPLETED

**Core Components Implemented:**
- ✅ AdapterFactoryInterface with comprehensive documentation
- ✅ AdapterRegistry with full static registry functionality
- ✅ AdapterException with factory methods for error scenarios
- ✅ Complete unit test suite with >95% coverage

**Test Coverage:**
- ✅ `tests/Exception/AdapterExceptionTest.php` - Tests all factory methods and error scenarios
- ✅ `tests/Registry/AdapterRegistryTest.php` - Tests registration, creation, and error handling
- ✅ `tests/Registry/AdapterFactoryInterfaceTest.php` - Tests interface contract and implementations

**Key Features Delivered:**
- Framework-agnostic static registry pattern
- Comprehensive error handling with helpful messages
- Clean test isolation with setup/teardown methods
- Proper exception chaining and context preservation
- Configuration validation and normalization support
- Testing utilities for clean test environments

### Phase 2 Implementation Status: ✅ COMPLETED

**EdgeBinder Integration Implemented:**
- ✅ Factory methods added to EdgeBinder class for configuration-based creation
- ✅ Registry-based adapter discovery and creation
- ✅ Backward compatibility maintained with existing constructor
- ✅ Configuration validation with helpful error messages
- ✅ Integration tests with mock third-party adapters

### Phase 3 Implementation Status: ✅ COMPLETED

**Documentation and Examples Implemented:**
- ✅ Complete developer documentation for creating third-party adapters
- ✅ Framework-specific integration examples (Laminas, Symfony, Laravel, Slim)
- ✅ Reference implementation of Redis adapter with comprehensive tests
- ✅ Migration guide for existing custom adapters
- ✅ Updated README.md with extensibility overview and examples
- ✅ API documentation updated with extensible adapter system information

**Phase 3 Deliverables:**
- ✅ `docs/EXTENSIBLE_ADAPTERS.md` - Complete developer guide with step-by-step tutorials
- ✅ `docs/FRAMEWORK_INTEGRATION.md` - Framework-specific integration examples and patterns
- ✅ `docs/MIGRATION_GUIDE.md` - Migration documentation for existing custom adapters
- ✅ `examples/RedisAdapter/` - Complete Redis adapter reference implementation
- ✅ `examples/RedisAdapter/src/RedisAdapter.php` - Full adapter implementation with error handling
- ✅ `examples/RedisAdapter/src/RedisAdapterFactory.php` - Factory implementation with validation
- ✅ `examples/RedisAdapter/tests/` - Comprehensive unit and integration tests
- ✅ Updated `README.md` with extensibility overview, examples, and documentation links

**Key Features Delivered:**
- Complete step-by-step guide for creating third-party adapters
- Framework integration patterns for Laminas, Symfony, Laravel, Slim, and generic PHP
- Reference Redis adapter demonstrating best practices and patterns
- Migration guide for converting existing adapters to the new system
- Comprehensive test examples showing unit and integration testing patterns
- Updated project documentation with extensibility information

**New EdgeBinder Factory Methods:**
```php
// Create EdgeBinder from configuration using registered adapters
EdgeBinder::fromConfiguration(array $config, ContainerInterface $container, array $globalConfig = []): EdgeBinder

// Create EdgeBinder from adapter (backward compatibility)
EdgeBinder::fromAdapter(PersistenceAdapterInterface $adapter): EdgeBinder
```

**Configuration Format:**
```php
$config = [
    'adapter' => 'weaviate',  // Required: adapter type
    'weaviate_client' => 'weaviate.client.rag',  // Client service name
    'collection_name' => 'RAGBindings',  // Adapter-specific config
    'schema' => ['auto_create' => true],  // More adapter-specific config
];

$edgeBinder = EdgeBinder::fromConfiguration($config, $container, $globalConfig);
```

**Integration Test Coverage:**
- ✅ `tests/Integration/EdgeBinderFactoryTest.php` - Tests factory methods and configuration validation
- ✅ `tests/Integration/AdapterRegistryIntegrationTest.php` - Tests complete workflow from registration to usage
- ✅ `tests/Integration/MockAdapterFactory.php` - Mock adapter factory for testing

**Key Features Delivered:**
- Framework-agnostic EdgeBinder creation from configuration
- Automatic adapter discovery through registry
- Configuration structure transformation for AdapterFactoryInterface
- Comprehensive error handling with context-aware messages
- Full backward compatibility with existing EdgeBinder constructor
- Mock adapters and factories for comprehensive testing

## Using EdgeBinder with Registered Adapters

### Framework Integration Examples

#### Laminas/Mezzio
```php
// In Module.php or application bootstrap
use EdgeBinder\Registry\AdapterRegistry;
use MyVendor\WeaviateAdapter\WeaviateAdapterFactory;

// Register adapter factory
AdapterRegistry::register(new WeaviateAdapterFactory());

// In your service factory
public function __invoke(ContainerInterface $container): EdgeBinder
{
    $config = $container->get('config')['edgebinder']['rag'];
    return EdgeBinder::fromConfiguration($config, $container);
}
```

#### Symfony
```php
// In bundle boot method or compiler pass
use EdgeBinder\Registry\AdapterRegistry;

foreach ($container->findTaggedServiceIds('edgebinder.adapter_factory') as $id => $tags) {
    $factory = $container->get($id);
    AdapterRegistry::register($factory);
}

// In your service
public function createEdgeBinder(ContainerInterface $container): EdgeBinder
{
    $config = $container->getParameter('edgebinder.rag');
    return EdgeBinder::fromConfiguration($config, $container);
}
```

#### Laravel
```php
// In service provider boot method
use EdgeBinder\Registry\AdapterRegistry;

public function boot()
{
    AdapterRegistry::register(new WeaviateAdapterFactory());
}

// In your service
public function createEdgeBinder(): EdgeBinder
{
    $config = config('edgebinder.rag');
    return EdgeBinder::fromConfiguration($config, app());
}
```

#### Generic PHP
```php
// Anywhere in application bootstrap
use EdgeBinder\Registry\AdapterRegistry;
use EdgeBinder\EdgeBinder;

// Register adapters
AdapterRegistry::register(new WeaviateAdapterFactory());
AdapterRegistry::register(new JanusAdapterFactory());

// Create EdgeBinder instances
$ragConfig = [
    'adapter' => 'weaviate',
    'weaviate_client' => 'weaviate.client.rag',
    'collection_name' => 'RAGBindings',
];

$socialConfig = [
    'adapter' => 'janus',
    'janus_client' => 'janus.client.social',
    'graph_name' => 'SocialNetwork',
];

$ragBinder = EdgeBinder::fromConfiguration($ragConfig, $container);
$socialBinder = EdgeBinder::fromConfiguration($socialConfig, $container);
```

## Creating New Adapters

### Step 1: Implement PersistenceAdapterInterface

Create your adapter class implementing `EdgeBinder\Contracts\PersistenceAdapterInterface`:

```php
<?php
namespace MyVendor\MyAdapter;

use EdgeBinder\Contracts\PersistenceAdapterInterface;
use EdgeBinder\Contracts\BindingInterface;
use EdgeBinder\Contracts\QueryBuilderInterface;

class MyCustomAdapter implements PersistenceAdapterInterface
{
    private $client;
    private array $config;

    public function __construct($client, array $config = [])
    {
        $this->client = $client;
        $this->config = $config;
    }

    public function store(BindingInterface $binding): void
    {
        // Implement storage logic using your backend
        // Convert binding to your storage format
        // Handle errors with PersistenceException
    }

    public function find(string $bindingId): ?BindingInterface
    {
        // Implement retrieval logic
        // Return null if not found
        // Convert from storage format to Binding object
    }

    public function delete(string $bindingId): void
    {
        // Implement deletion logic
        // Throw PersistenceException on failure
    }

    public function executeQuery(QueryBuilderInterface $query): array
    {
        // Implement query execution
        // Return array of BindingInterface objects
    }

    public function extractEntityId(object $entity): string
    {
        // Try EntityInterface first, then getId() method, then id property
        // Throw EntityExtractionException if cannot extract
    }

    public function extractEntityType(object $entity): string
    {
        // Try EntityInterface first, then getType() method, then class name
    }

    public function validateAndNormalizeMetadata(array $metadata): array
    {
        // Validate metadata for your storage requirements
        // Throw InvalidMetadataException if invalid
        // Return normalized metadata
    }

    // Implement other required methods...
}
```

### Step 2: Create Adapter Factory

Create a factory implementing `EdgeBinder\Registry\AdapterFactoryInterface`:

```php
<?php
namespace MyVendor\MyAdapter;

use EdgeBinder\Registry\AdapterFactoryInterface;
use EdgeBinder\Contracts\PersistenceAdapterInterface;

class MyCustomAdapterFactory implements AdapterFactoryInterface
{
    public function createAdapter(array $config): PersistenceAdapterInterface
    {
        $container = $config['container'];
        $instanceConfig = $config['instance'];
        $globalConfig = $config['global'];
        
        // Get configuration from flatter structure
        $client = $container->get($instanceConfig['mycustom_client'] ?? 'mycustom.client.default');
        
        // Build adapter configuration from flatter structure
        $adapterConfig = [
            'host' => $instanceConfig['host'] ?? 'localhost',
            'port' => $instanceConfig['port'] ?? 1234,
            // Extract other config directly from instance config
        ];

        return new MyCustomAdapter($client, $adapterConfig);
    }
    
    public function getAdapterType(): string
    {
        return 'mycustom'; // Unique identifier for your adapter
    }
}
```

### Step 3: Register Adapter (Framework Examples)

#### Laminas/Mezzio
```php
// In Module.php or application bootstrap
\EdgeBinder\Registry\AdapterRegistry::register(new MyCustomAdapterFactory());
```

#### Symfony
```php
// In bundle boot method or compiler pass
\EdgeBinder\Registry\AdapterRegistry::register(new MyCustomAdapterFactory());
```

#### Laravel
```php
// In service provider boot method
\EdgeBinder\Registry\AdapterRegistry::register(new MyCustomAdapterFactory());
```

#### Generic PHP
```php
// Anywhere in application bootstrap
\EdgeBinder\Registry\AdapterRegistry::register(new MyCustomAdapterFactory());
```

### Step 4: Configuration

Create configuration that works across all frameworks:

```php
return [
    'edgebinder' => [
        'myinstance' => [
            'adapter' => 'mycustom',
            'mycustom_client' => 'mycustom.client.default',
            'host' => 'localhost',
            'port' => 1234,
            // adapter-specific config directly in instance
        ],
    ],
];
```

## Development Patterns

### Error Handling
- Use specific exceptions from `EdgeBinder\Exception\` namespace
- `PersistenceException` for storage operations
- `EntityExtractionException` for entity ID/type extraction
- `InvalidMetadataException` for metadata validation
- `BindingNotFoundException` for missing bindings
- `AdapterException` for adapter registration and creation errors

### Registry Patterns
- Use `AdapterRegistry::register()` in framework bootstrap/service providers
- Always call `AdapterRegistry::clear()` in test tearDown for clean isolation
- Use `AdapterRegistry::hasAdapter()` before attempting to create adapters
- Wrap adapter creation in try-catch for proper error handling
- Use factory methods on `AdapterException` for consistent error messages

### Entity Extraction Strategy
1. Check if entity implements `EdgeBinder\Contracts\EntityInterface`
2. Try `getId()` and `getType()` methods
3. Fall back to reflection on `id` property and class name
4. Throw `EntityExtractionException` if extraction fails

### Metadata Validation
- Validate data types (no resources, limited objects)
- Check size limits for your storage backend
- Normalize data for optimal storage
- Support `DateTimeInterface` objects

### Testing
- Create unit tests for all adapter methods
- Mock external dependencies (clients, connections)
- Test error conditions and edge cases
- Create integration tests with real storage backends

## Configuration Patterns

### Standard Configuration Structure (Flatter Approach)
```php
[
    'instance' => [
        'adapter' => 'adapter_type',
        'adapter_type_client' => 'service_name',
        // adapter-specific config directly here
        'host' => 'localhost',
        'port' => 1234,
    ],
    'global' => $globalEdgeBinderConfig, // Full global config for context
    'container' => $psrContainer, // PSR-11 container
]
```

### Multiple Instances (Flatter Configuration)
Support multiple EdgeBinder instances with different adapters:
```php
'edgebinder' => [
    'rag' => [
        'adapter' => 'weaviate',
        'weaviate_client' => 'weaviate.client.rag',
        'collection_name' => 'RAGBindings',
        'schema' => ['auto_create' => true, 'vectorizer' => 'text2vec-openai'],
    ],
    'social' => [
        'adapter' => 'janus',
        'janus_client' => 'janus.client.social',
        'graph_name' => 'SocialNetwork',
        'consistency_level' => 'eventual',
    ],
    'cache' => [
        'adapter' => 'redis',
        'redis_client' => 'redis.client.cache',
        'ttl' => 3600,
        'prefix' => 'edgebinder:',
    ],
]
```

## Key Files to Understand

### Core Files
- `src/EdgeBinder.php` - Main service implementation
- `src/Contracts/PersistenceAdapterInterface.php` - Adapter contract
- `src/Binding.php` - Relationship entity
- `src/Registry/AdapterRegistry.php` - Extensibility system

### Example Adapter
- `../weaviate-adapter/src/WeaviateAdapter.php` - Reference implementation
- Shows proper error handling, configuration, and integration patterns

### Documentation
- `docs/EXTENSIBLE_ADAPTERS.md` - Complete developer guide for creating third-party adapters
- `docs/FRAMEWORK_INTEGRATION.md` - Framework-specific integration examples
- `docs/MIGRATION_GUIDE.md` - Migration guide for existing custom adapters
- `docs/ARCHITECTURE_DIAGRAM.md` - System architecture overview
- `README.md` - Getting started and basic usage

## Development Guidelines

### Code Quality
- PHP 8.3+ with strict types
- PHPStan level 8 compliance
- PSR-12 coding standards
- 95%+ test coverage
- Comprehensive PHPDoc

### Naming Conventions
- Adapter classes: `{Name}Adapter` (e.g., `WeaviateAdapter`)
- Factory classes: `{Name}AdapterFactory` (e.g., `WeaviateAdapterFactory`)
- Adapter types: lowercase (e.g., 'weaviate', 'janus', 'redis')
- Service names: `{adapter}.client.{connection}` (e.g., 'weaviate.client.rag')

## Common Implementation Patterns

### Adapter Constructor Pattern
```php
public function __construct($client, array $config = [], ?BindingMapper $mapper = null)
{
    $this->client = $client;
    $this->config = array_merge($this->getDefaultConfig(), $config);
    $this->mapper = $mapper ?? new DefaultBindingMapper();
}
```

### Configuration Validation Pattern
```php
private function validateConfiguration(array $config): void
{
    $required = ['client', 'collection_name'];
    foreach ($required as $key) {
        if (!isset($config[$key])) {
            throw new \InvalidArgumentException("Required config key '{$key}' missing");
        }
    }
}
```

### Error Handling Pattern
```php
try {
    $result = $this->client->operation($data);
    if (!$result) {
        throw PersistenceException::operationFailed('store', 'Client returned false');
    }
} catch (\Exception $e) {
    if ($e instanceof PersistenceException) {
        throw $e;
    }
    throw PersistenceException::serverError('store', $e->getMessage(), $e);
}
```

### Entity Extraction Pattern
```php
public function extractEntityId(object $entity): string
{
    if ($entity instanceof EntityInterface) {
        return $entity->getId();
    }

    if (method_exists($entity, 'getId')) {
        $id = $entity->getId();
        if (is_string($id) && !empty($id)) {
            return $id;
        }
    }

    if (property_exists($entity, 'id')) {
        $id = $entity->id;
        if (is_string($id) && !empty($id)) {
            return $id;
        }
    }

    throw new EntityExtractionException('Cannot extract entity ID', $entity);
}
```

## Testing Patterns

### Mock Adapter Factory for Testing
```php
class MockAdapterFactory implements AdapterFactoryInterface
{
    private PersistenceAdapterInterface $adapter;

    public function __construct(PersistenceAdapterInterface $adapter)
    {
        $this->adapter = $adapter;
    }

    public function createAdapter(array $config): PersistenceAdapterInterface
    {
        return $this->adapter;
    }

    public function getAdapterType(): string
    {
        return 'mock';
    }
}
```

### Integration Test Pattern
```php
public function testAdapterRegistrationAndUsage(): void
{
    // Register adapter
    AdapterRegistry::register(new MyCustomAdapterFactory());

    // Verify registration
    $this->assertTrue(AdapterRegistry::hasAdapter('mycustom'));

    // Create adapter through registry
    $config = [
        'instance' => [
            'adapter' => 'mycustom',
            'mycustom_client' => 'test.client',
            'host' => 'localhost',
            'port' => 1234,
        ],
        'global' => $globalConfig,
        'container' => $this->container,
    ];

    $adapter = AdapterRegistry::create('mycustom', $config);
    $this->assertInstanceOf(PersistenceAdapterInterface::class, $adapter);
}
```

## Framework Integration Patterns

### Laminas ConfigProvider Pattern
```php
class ConfigProvider
{
    public function __invoke(): array
    {
        return [
            'dependencies' => [
                'factories' => [
                    MyCustomAdapterFactory::class => function() {
                        return new MyCustomAdapterFactory();
                    },
                ],
            ],
        ];
    }
}

// In Module.php
public function onBootstrap($e)
{
    $container = $e->getApplication()->getServiceManager();
    $factory = $container->get(MyCustomAdapterFactory::class);
    AdapterRegistry::register($factory);
}
```

### Symfony Service Configuration Pattern
```yaml
# services.yaml
services:
    MyVendor\MyAdapter\MyCustomAdapterFactory:
        tags: ['edgebinder.adapter_factory']
```

```php
// Compiler pass
foreach ($container->findTaggedServiceIds('edgebinder.adapter_factory') as $id => $tags) {
    $factory = $container->get($id);
    AdapterRegistry::register($factory);
}
```

### Laravel Service Provider Pattern
```php
class MyAdapterServiceProvider extends ServiceProvider
{
    public function boot()
    {
        AdapterRegistry::register(new MyCustomAdapterFactory());
    }

    public function register()
    {
        $this->app->singleton('edgebinder.adapter.mycustom', function() {
            return new MyCustomAdapterFactory();
        });
    }
}
```

## Troubleshooting Guide

### Common Issues

1. **Adapter Not Found**: Ensure `AdapterRegistry::register()` is called before EdgeBinder instantiation
2. **Configuration Errors**: Verify config structure matches expected format
3. **Container Service Missing**: Ensure client services are registered in container
4. **Entity Extraction Fails**: Implement EntityInterface or ensure getId()/getType() methods exist
5. **Metadata Validation**: Check size limits and data types for your storage backend

### Debug Helpers
```php
// Check registered adapters
$types = AdapterRegistry::getRegisteredTypes();
var_dump($types);

// Validate configuration structure
$required = ['instance', 'global', 'container'];
foreach ($required as $key) {
    if (!isset($config[$key])) {
        throw new \InvalidArgumentException("Missing config key: {$key}");
    }
}
```

This comprehensive context should help you understand the EdgeBinder architecture and provide complete guidance for creating new adapters that work seamlessly across all PHP frameworks.
